# -*- coding: utf-8 -*-
"""
Created on Thu Nov 19 16:57:18 2020

@author: ybara
"""
import numpy as np
import seaborn as sn
import pandas as pd
import matplotlib.pyplot as plt

nusc_bev_classes=[
    'car', 'truck',  'bus', 'trailer', 
    'constr_veh', 'pedestr', 'motorcy', 
    'bicycle', 'traf_cone', 'barrier','bg'
]

Object_confuse=[[8.905070e+05,4.905900e+04,2.226000e+03,9.300000e+01,1.830000e+02
,6.510000e+02,1.520000e+03,2.620000e+02,1.700000e+01,4.200000e+01
,9.089210e+05]
,[4.086600e+04,1.415510e+05,1.822700e+04,3.286100e+04,2.895700e+04
,3.370000e+02,5.300000e+01,3.600000e+01,1.400000e+02,0.000000e+00
,3.325410e+05]
,[8.620000e+02,1.604000e+03,3.452400e+04,5.400000e+01,0.000000e+00
,0.000000e+00,0.000000e+00,0.000000e+00,0.000000e+00,0.000000e+00
,2.918400e+04]
,[7.880000e+02,3.119000e+03,0.000000e+00,2.695300e+04,4.640000e+02
,0.000000e+00,0.000000e+00,0.000000e+00,0.000000e+00,0.000000e+00
,6.136000e+04]
,[5.300000e+01,1.930000e+02,0.000000e+00,1.130000e+02,2.897000e+03
,5.000000e+00,0.000000e+00,0.000000e+00,2.000000e+00,8.500000e+01
,7.770000e+03]
,[1.920000e+02,4.420000e+02,0.000000e+00,2.030000e+02,2.100000e+01
,2.543000e+03,0.000000e+00,0.000000e+00,8.800000e+01,0.000000e+00
,1.693600e+04]
,[8.500000e+01,4.100000e+01,0.000000e+00,0.000000e+00,0.000000e+00
,0.000000e+00,9.370000e+02,1.190000e+02,0.000000e+00,0.000000e+00
,2.170000e+03]
,[0.000000e+00,1.200000e+01,0.000000e+00,6.000000e+00,0.000000e+00
,0.000000e+00,1.560000e+02,9.140000e+02,0.000000e+00,0.000000e+00
,4.554000e+03]
,[6.100000e+01,0.000000e+00,0.000000e+00,4.640000e+02,0.000000e+00
,1.900000e+01,0.000000e+00,0.000000e+00,2.820000e+02,5.800000e+01
,3.476000e+03]
,[4.000000e+00,2.600000e+01,0.000000e+00,0.000000e+00,7.000000e+00
,1.900000e+01,0.000000e+00,0.000000e+00,2.000000e+00,1.903400e+04
,5.358200e+04]
,[7.704370e+05,2.110490e+05,4.879600e+04,7.937600e+04,9.725700e+04
,4.425800e+04,8.510000e+03,1.050500e+04,5.473000e+03,6.791900e+04
,6.940524e+07]]

Object_confuse_t_1_t=[[8.4739800e+05,4.5988000e+04,3.0460000e+03,6.8000000e+01,2.0900000e+02
,7.2800000e+02,1.4730000e+03,2.6100000e+02,2.3000000e+01,7.9000000e+01
,9.3587500e+05]
,[4.7744000e+04,1.2830500e+05,1.7276000e+04,2.9620000e+04,2.7921000e+04
,3.4400000e+02,5.4000000e+01,8.1000000e+01,1.3500000e+02,2.7000000e+01
,3.4081100e+05]
,[9.8500000e+02,1.9330000e+03,2.9195000e+04,2.9000000e+02,0.0000000e+00
,0.0000000e+00,0.0000000e+00,0.0000000e+00,0.0000000e+00,0.0000000e+00
,2.9587000e+04]
,[6.7900000e+02,2.9700000e+03,5.2000000e+01,2.4614000e+04,8.3600000e+02
,0.0000000e+00,0.0000000e+00,0.0000000e+00,0.0000000e+00,0.0000000e+00
,6.6268000e+04]
,[1.5600000e+02,1.4700000e+02,0.0000000e+00,1.2000000e+02,2.5320000e+03
,2.0000000e+01,0.0000000e+00,0.0000000e+00,3.0000000e+00,9.2000000e+01
,7.0660000e+03]
,[2.2200000e+02,3.6500000e+02,1.7000000e+01,1.8100000e+02,3.1000000e+01
,2.2710000e+03,2.0000000e+00,2.5000000e+01,3.6000000e+01,4.0000000e+00
,1.9431000e+04]
,[7.9000000e+01,3.0000000e+00,0.0000000e+00,0.0000000e+00,0.0000000e+00
,0.0000000e+00,8.6700000e+02,1.1200000e+02,0.0000000e+00,0.0000000e+00
,2.4820000e+03]
,[0.0000000e+00,5.0000000e+00,0.0000000e+00,6.0000000e+00,0.0000000e+00
,0.0000000e+00,1.0000000e+02,6.6400000e+02,0.0000000e+00,0.0000000e+00
,4.2730000e+03]
,[5.7000000e+01,0.0000000e+00,0.0000000e+00,3.4400000e+02,0.0000000e+00
,2.0000000e+00,0.0000000e+00,0.0000000e+00,2.6000000e+02,5.2000000e+01
,3.0240000e+03]
,[2.0000000e+00,9.0000000e+00,0.0000000e+00,0.0000000e+00,1.0000000e+00
,2.7000000e+01,0.0000000e+00,0.0000000e+00,5.0000000e+00,1.7063000e+04
,4.7870000e+04]
,[8.0653300e+05,2.2737100e+05,5.4187000e+04,8.4880000e+04,9.8256000e+04
,4.4440000e+04,8.6800000e+03,1.0693000e+04,5.5420000e+03,6.9821000e+04
,6.9369064e+07]]

[0.6993207,
 0.25886795,
 0.35702857,
 0.31453058,
 0.31482999920122007,
 0.14728926001223727,
 0.21377628727081013,
 0.11669384813775317,
 0.01842928888565398,
 0.033325506999677165,
 0.062590239676581,
 0.04093711467324291,
 0.027417483918591164,
 0.12634392678375736]


Object_confuse = [[1.037750e+06,6.602100e+04,6.161000e+03,3.400000e+02,1.460000e+02
, 6.990000e+02 ,1.759000e+03,2.110000e+02,1.200000e+01,1.260000e+02
, 1.107252e+06]
,[2.134700e+04,1.229520e+05,9.160000e+03,2.678200e+04,1.650800e+04
, 2.870000e+02,0.000000e+00,1.500000e+01,6.300000e+01,2.500000e+01
, 2.091970e+05]
,[1.870000e+02,1.304000e+03,3.885900e+04,2.900000e+01,1.000000e+01
, 4.500000e+01,0.000000e+00,0.000000e+00,0.000000e+00,0.000000e+00
, 3.690700e+04]
,[8.700000e+01,2.537000e+03,0.000000e+00,2.557900e+04,0.000000e+00
, 7.000000e+00,0.000000e+00,0.000000e+00,1.200000e+01,0.000000e+00
, 2.219700e+04]
,[1.530000e+02,6.520000e+02,0.000000e+00,1.232000e+03,6.264000e+03
, 5.600000e+01,0.000000e+00,0.000000e+00,1.400000e+01,2.860000e+02
, 3.009100e+04]
,[9.000000e+02,1.137000e+03,1.110000e+02,2.850000e+02,6.800000e+01
, 1.243400e+04,2.400000e+01,4.140000e+02,1.680000e+02,2.770000e+02
, 1.990180e+05]
,[3.090000e+02,2.800000e+01,0.000000e+00,1.000000e+00,0.000000e+00
, 1.000000e+02,2.355000e+03,2.390000e+02,0.000000e+00,0.000000e+00
, 1.516000e+04]
,[1.800000e+01,5.500000e+01,0.000000e+00,1.050000e+02,1.600000e+02
, 1.900000e+01,2.840000e+02,1.875000e+03,2.000000e+00,1.800000e+01
, 1.049500e+04]
,[1.540000e+02,4.500000e+01,0.000000e+00,1.350000e+03,2.000000e+00
, 1.900000e+01,0.000000e+00,0.000000e+00,8.620000e+02,2.270000e+02
, 1.175000e+04]
,[1.520000e+02,0.000000e+00,0.000000e+00,2.200000e+01,3.000000e+00
, 2.100000e+01,0.000000e+00,0.000000e+00,2.300000e+01,2.302200e+04
, 4.816100e+04]
,[6.427980e+05,2.123650e+05,4.948200e+04,8.439800e+04,1.066250e+05
, 3.414500e+04,6.754000e+03,9.082000e+03,4.848000e+03,6.315700e+04
, 6.913574e+07]]




conf = np.array(Object_confuse)
fps = np.sum(conf,axis=-1)
fns = np.sum(conf,axis=0)

ious = []
for k in range(10):
    ious.append(conf[k,k]/(fps[k] + fns[k] - conf[k,k]))


font = {'size'   : 16,
        'weight' : 'normal'}
plt.rc('font', **font)
# normed_conf = conf / (196*200)
df_cm = pd.DataFrame(np.round(np.clip(np.log10(conf+0.0001),0,30),1), index = nusc_bev_classes,
                  columns =nusc_bev_classes)
plt.figure(figsize = (11,11))
with sn.plotting_context(font_scale=2.5):
    sn.heatmap(df_cm, annot=True)
plt.savefig('nusc_heatmap.pdf')


ARGOVERSE_CLASS_NAMES = [
     'vehicle', 'pedestr', 'large_veh', 'bicycle', 'bus',
    'trailer', 'motorcy','bg'
]


argo_confuse =[[1.5680790e+06,3.5260000e+03,2.7725000e+04,1.7700000e+02,4.5921000e+04
,7.8660000e+03,7.1900000e+02,1.8911620e+06]
,[6.8240000e+03,1.2246000e+04,9.3700000e+02,2.1000000e+01,2.8000000e+01
,0.0000000e+00,0.0000000e+00,9.2951000e+04]
,[7.4560000e+03,0.0000000e+00,7.6783000e+04,0.0000000e+00,7.9843000e+04
,1.1939000e+04,0.0000000e+00,8.3234000e+04]
,[1.9140000e+03,1.2810000e+03,4.6000000e+01,5.4200000e+02,5.6970000e+03
,6.9000000e+01,4.4100000e+02,9.4485000e+04]
,[2.3000000e+01,0.0000000e+00,8.3000000e+01,0.0000000e+00,5.2841000e+04
,0.0000000e+00,0.0000000e+00,5.3527000e+04]
,[0.0000000e+00,0.0000000e+00,1.3540000e+03,0.0000000e+00,2.7170000e+03
,2.8830000e+03,0.0000000e+00,2.8910000e+03]
,[3.5600000e+02,3.8000000e+01,0.0000000e+00,2.0000000e+01,0.0000000e+00
,0.0000000e+00,3.1200000e+02,5.0300000e+03]
,[2.1904250e+06,9.1428000e+04,2.6005000e+05,6.2520000e+03,1.1046590e+06
,3.2896100e+05,8.6150000e+03,8.1206696e+07]]


argo_conf = np.array(argo_confuse)
argo_fps = np.sum(argo_conf,axis=-1)
argo_fns = np.sum(argo_conf,axis=0)

ious = []
for k in range(7):
    ious.append(argo_conf[k,k]/(argo_fps[k] + argo_fns[k] - argo_conf[k,k]))


font = {'size'   : 16,
        'weight' : 'normal'}
plt.rc('font', **font)
# normed_conf = conf / (196*200)
df_cm = pd.DataFrame(np.round(np.clip(np.log10(argo_conf+0.0001),0,30),1), index =ARGOVERSE_CLASS_NAMES ,
                  columns =ARGOVERSE_CLASS_NAMES )
plt.figure(figsize = (8,8))
with sn.plotting_context(font_scale=2.5):
    sn.heatmap(df_cm, annot=True)
plt.savefig('argo_heatmap.pdf', bbox_inches='tight')
















'''
GAN
'''

Object_confuse =[[9.107510e+05,4.554800e+04,2.371000e+03,3.200000e+01,9.400000e+01
,6.110000e+02,1.431000e+03,2.340000e+02,1.900000e+01,2.100000e+01
,8.483330e+05]
,[3.746000e+04,1.529110e+05,1.875200e+04,3.115200e+04,2.650500e+04
,3.930000e+02,5.100000e+01,1.900000e+01,1.450000e+02,0.000000e+00
,3.163330e+05]
,[3.750000e+02,3.590000e+02,3.641600e+04,0.000000e+00,0.000000e+00
,0.000000e+00,0.000000e+00,0.000000e+00,0.000000e+00,0.000000e+00
,2.381300e+04]
,[4.180000e+02,3.386000e+03,0.000000e+00,2.674400e+04,1.770000e+02
,0.000000e+00,0.000000e+00,0.000000e+00,0.000000e+00,0.000000e+00
,5.807500e+04]
,[2.800000e+01,6.700000e+01,0.000000e+00,1.490000e+02,3.133000e+03
,2.000000e+00,0.000000e+00,0.000000e+00,2.000000e+00,8.700000e+01
,8.278000e+03]
,[2.350000e+02,3.950000e+02,0.000000e+00,7.600000e+01,0.000000e+00
,2.428000e+03,0.000000e+00,0.000000e+00,6.900000e+01,0.000000e+00
,1.482600e+04]
,[1.270000e+02,1.250000e+02,0.000000e+00,0.000000e+00,0.000000e+00
,4.000000e+00,8.970000e+02,1.100000e+02,0.000000e+00,0.000000e+00
,2.108000e+03]
,[0.000000e+00,5.000000e+00,0.000000e+00,3.200000e+01,0.000000e+00
,0.000000e+00,2.450000e+02,1.211000e+03,0.000000e+00,0.000000e+00
,6.260000e+03]
,[7.100000e+01,0.000000e+00,0.000000e+00,6.630000e+02,0.000000e+00
,1.800000e+01,0.000000e+00,0.000000e+00,2.860000e+02,2.500000e+01
,3.221000e+03]
,[4.000000e+00,2.600000e+01,3.000000e+00,0.000000e+00,7.000000e+00
,1.800000e+01,0.000000e+00,0.000000e+00,2.000000e+00,1.930500e+04
,5.168400e+04]
,[7.543860e+05,2.042740e+05,4.623100e+04,8.127500e+04,9.987000e+04
,4.435800e+04,8.552000e+03,1.026200e+04,5.481000e+03,6.770000e+04
,6.949287e+07]]

conf = np.array(Object_confuse)
fps = np.sum(conf,axis=-1)
fns = np.sum(conf,axis=0)

ious = []
for k in range(10):
    ious.append(conf[k,k]/(fps[k] + fns[k] - conf[k,k]))
    
    
    
    
    
    
'''
ARGO SIGMOID
'''

Object_confuse=[[1.7146130e+06,7.6710000e+03,3.9190000e+04,9.5100000e+02,3.7258000e+04
,8.0770000e+03,9.3000000e+02,2.5951560e+06]
,[1.3618000e+04,1.8202000e+04,1.1560000e+03,9.2100000e+02,5.4400000e+02
,5.7000000e+01,1.0200000e+02,2.9098400e+05]
,[1.5136000e+04,0.0000000e+00,8.7413000e+04,0.0000000e+00,1.3732900e+05
,1.6313000e+04,2.1000000e+01,1.7201800e+05]
,[1.4630000e+03,2.6050000e+03,2.6900000e+02,1.4320000e+03,3.6000000e+01
,1.3000000e+01,2.2700000e+02,1.4379200e+05]
,[5.2570000e+03,2.5000000e+01,1.8358000e+04,0.0000000e+00,4.4179700e+05
,1.2910000e+03,0.0000000e+00,3.3305500e+05]
,[2.1000000e+01,0.0000000e+00,7.0120000e+03,0.0000000e+00,4.6700000e+02
,5.7350000e+03,0.0000000e+00,2.2825000e+04]
,[5.4390000e+03,1.3200000e+02,8.3500000e+02,2.3100000e+02,2.4800000e+02
,3.2660000e+03,7.9500000e+02,3.7250000e+04]
,[2.0336070e+06,8.3665000e+04,2.3035500e+05,4.1800000e+03,7.2079200e+05
,3.2216100e+05 ,8.4370000e+03, 7.9902136e+07]]
    

conf = np.array(Object_confuse)
fps = np.sum(conf,axis=-1)
fns = np.sum(conf,axis=0)

ious = []
for k in range(10):
    ious.append(conf[k,k]/(fps[k] + fns[k] - conf[k,k]))
    
    
    
'''
NUSC OBJECT NO IMAGE
'''

Object_confuse=[[1.5895390e+06,2.0641700e+05,3.9727000e+04,1.7014000e+04,2.6313000e+04
,8.1920000e+03,4.4110000e+03,2.2930000e+03,5.1300000e+02,6.8920000e+03
,2.4851152e+07]
,[5.8879000e+04,1.7702400e+05,1.5455000e+04,9.6895000e+04,8.3339000e+04
,1.0050000e+03,3.2000000e+01,1.5300000e+02,3.5000000e+02,2.7120000e+03
,3.4825170e+06]
,[1.0428000e+04,5.8910000e+03,4.4740000e+04,6.0400000e+02,4.0000000e+00
,9.6000000e+01,4.4000000e+01,4.2000000e+01,2.0000000e+00,2.9410000e+03
,6.9746400e+05]
,[4.5100000e+02,1.8460000e+03,3.3700000e+02,1.4948000e+04,2.3590000e+03
,9.0000000e+00,0.0000000e+00,0.0000000e+00,1.5100000e+02,1.0200000e+03
,4.3837100e+05]
,[3.9460000e+03,7.6350000e+03,1.6670000e+03,2.8500000e+03,1.2556000e+04
,4.4800000e+02,8.0000000e+01,4.8500000e+02,2.2300000e+02,9.8430000e+03
,2.2795628e+07]
,[3.3544000e+04,6.1740000e+03,1.4500000e+03,2.3130000e+03,3.0380000e+03
,3.5841000e+04,4.6430000e+03,6.2260000e+03,1.1310000e+03,6.5880000e+03
,1.2100595e+07]
,[6.4500000e+02,8.2000000e+01,2.0000000e+00,1.6000000e+01,6.0000000e+00
,2.8200000e+02,1.9220000e+03,2.1440000e+03,1.3000000e+01,1.7100000e+02
,7.3897500e+05]
,[1.4600000e+02,6.6000000e+01,1.0000000e+01,1.1900000e+02,4.2000000e+01
,1.4600000e+02,1.0000000e+00,1.1900000e+02,3.3000000e+01,1.8700000e+02
,2.9351500e+05]
,[1.7460000e+03,6.8800000e+02,5.1000000e+01,4.5590000e+03,8.9900000e+02
,4.3000000e+02,3.1000000e+01,6.9000000e+01,2.8190000e+03,5.1780000e+03
,1.2420330e+06]
,[4.5290000e+03,1.2730000e+03,3.3400000e+02,8.0200000e+02,1.2290000e+03
,1.3830000e+03,1.2000000e+01,3.0500000e+02,7.6600000e+02,5.1585000e+04
,4.1631520e+06]
,[2.0000000e+00,0.0000000e+00,0.0000000e+00,3.0000000e+00,1.0000000e+00
,0.0000000e+00,0.0000000e+00,0.0000000e+00,3.0000000e+00,2.1000000e+01
,2.2425000e+04]]

conf = np.array(Object_confuse)
fps = np.sum(conf,axis=-1)
fns = np.sum(conf,axis=0)

ious = []
for k in range(10):
    ious.append(conf[k,k]/(fps[k] + fns[k] - conf[k,k]))
    
    
    
'''
BEV NOIMAGE NO TEMP
'''

Object_confuse=[[1.5749970e+06,2.3232200e+05,4.4868000e+04,2.4572000e+04,3.7295000e+04
,1.1970000e+04,4.6760000e+03,2.3690000e+03,9.0400000e+02,9.1670000e+03
,2.5729516e+07]
,[6.2126000e+04,1.4362600e+05,1.2936000e+04,8.9387000e+04,7.4777000e+04
,9.2400000e+02,1.1400000e+02,2.1700000e+02,2.8600000e+02,3.9840000e+03
,3.1093380e+06]
,[1.0991000e+04,8.9510000e+03,4.0975000e+04,1.5640000e+03,9.0000000e+01
,1.1800000e+02,1.2200000e+02,4.7000000e+01,1.1000000e+01,2.1440000e+03
,7.4920200e+05]
,[6.5600000e+02,2.4620000e+03,5.2000000e+02,1.3601000e+04,1.9850000e+03
,9.0000000e+00,0.0000000e+00,0.0000000e+00,1.2300000e+02,1.0840000e+03
,3.7840900e+05]
,[5.4080000e+03,6.3520000e+03,1.4430000e+03,2.9940000e+03,8.6820000e+03
,1.0270000e+03,9.3000000e+01,4.0300000e+02,4.4000000e+02,1.1496000e+04
,2.2477440e+07]
,[3.9106000e+04,1.0576000e+04,2.3110000e+03,2.8070000e+03,3.6900000e+03
,3.1392000e+04,4.5270000e+03,5.9970000e+03,1.0490000e+03,7.1690000e+03
,1.1783420e+07]
,[1.5090000e+03,2.4400000e+02,3.3000000e+01,8.6000000e+01,6.1000000e+01
,1.9900000e+02,1.4820000e+03,1.9500000e+03,3.2000000e+01,1.1800000e+02
,5.7905600e+05]
,[2.7200000e+02,1.6200000e+02,1.0000000e+01,1.5700000e+02,1.4000000e+01
,2.0500000e+02,6.0000000e+00,1.3600000e+02,1.7000000e+01,1.3800000e+02
,3.0218200e+05]
,[2.2630000e+03,8.6800000e+02,4.9000000e+01,3.2890000e+03,8.1500000e+02
,3.5400000e+02,6.2000000e+01,7.2000000e+01,2.1080000e+03,4.2900000e+03
,9.7557300e+05]
,[6.5190000e+03,1.5330000e+03,6.2700000e+02,1.6420000e+03,2.3760000e+03
,1.6320000e+03,9.4000000e+01,6.4500000e+02,1.0320000e+03,4.7508000e+04
,4.7156590e+06]
,[8.0000000e+00,0.0000000e+00,1.0000000e+00,2.4000000e+01,1.0000000e+00
,2.0000000e+00,0.0000000e+00,0.0000000e+00,2.0000000e+00,4.0000000e+01
,2.6053000e+04]]
    
conf = np.array(Object_confuse)
fps = np.sum(conf,axis=-1)
fns = np.sum(conf,axis=0)

ious = []
for k in range(10):
    ious.append(conf[k,k]/(fps[k] + fns[k] - conf[k,k]))